// <auto-generated />
using System;
using Allup.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Allup.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220729194403_AddColumProductPercentDisc")]
    partial class AddColumProductPercentDisc
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Allup.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImgUrl = "banner-1.png"
                        },
                        new
                        {
                            Id = 2,
                            ImgUrl = "banner-2.png"
                        });
                });

            modelBuilder.Entity("Allup.Models.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("Allup.Models.Bio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNotified")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scheduler")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShippinValue")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "45 Grand Central Terminal New York,NY 1017 United State USA",
                            AuthorName = "Tural",
                            Logo = "logo.png",
                            MobilePhone = "+48 500 500 500",
                            PhoneNotified = "24/7 Support",
                            PhoneNumber = "+123 456 789",
                            Scheduler = "Mon-Sat 9:00pm - 5:00pm Sun:Closed",
                            ShippinValue = 35,
                            WebSite = "email@yourwebsitename.com"
                        });
                });

            modelBuilder.Entity("Allup.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 479, DateTimeKind.Local).AddTicks(6674),
                            Desc = "simply dummy text of the printing and typesetting industry. Lorem Ipsum ...",
                            ImgUrl = "blog-1.jpg",
                            Title = "This is Third Post For XipBlog",
                            UserId = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(2776),
                            Desc = "simply dummy text of the printing and typesetting industry. Lorem Ipsum ...",
                            ImgUrl = "blog-2.jpg",
                            Title = "This is Third Post For XipBlog",
                            UserId = "admin"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(2888),
                            Desc = "simply dummy text of the printing and typesetting industry. Lorem Ipsum ...",
                            ImgUrl = "blog-3.jpg",
                            Title = "This is Third Post For XipBlog",
                            UserId = "admin"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(2890),
                            Desc = "simply dummy text of the printing and typesetting industry. Lorem Ipsum ...",
                            ImgUrl = "blog-4.jpg",
                            Title = "This is Third Post For XipBlog",
                            UserId = "admin"
                        });
                });

            modelBuilder.Entity("Allup.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(6701),
                            IsDeleted = false,
                            Name = "brand1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(6875),
                            IsDeleted = false,
                            Name = "brand2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(6882),
                            IsDeleted = false,
                            Name = "brand3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(6883),
                            IsDeleted = false,
                            Name = "brand4"
                        });
                });

            modelBuilder.Entity("Allup.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(4846),
                            ImgUrl = "category-1.jpg",
                            IsDeleted = false,
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(5129),
                            ImgUrl = "category-2.jpg",
                            IsDeleted = false,
                            Name = "Computer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(5137),
                            ImgUrl = "category-3.jpg",
                            IsDeleted = false,
                            Name = "Smartphone"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(5138),
                            ImgUrl = "category-4.jpg",
                            IsDeleted = false,
                            Name = "Game Consoles"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(5372),
                            IsDeleted = false,
                            Name = "Bottoms",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(5383),
                            IsDeleted = false,
                            Name = "Tops & Sets",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(5384),
                            IsDeleted = false,
                            Name = "Audio & Video",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(5385),
                            IsDeleted = false,
                            Name = "Accessories",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(5388),
                            IsDeleted = false,
                            Name = "Camera",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(5389),
                            IsDeleted = false,
                            Name = "Accessories2",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(5390),
                            IsDeleted = false,
                            Name = "Games & Consoles",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(5391),
                            IsDeleted = false,
                            Name = "Video Games",
                            ParentId = 4
                        });
                });

            modelBuilder.Entity("Allup.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Allup.Models.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hotline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Allup.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FlagUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FlagUrl = "1.jpg",
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            FlagUrl = "2.jpg",
                            Name = "Français"
                        });
                });

            modelBuilder.Entity("Allup.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Allup.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Allup.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsBestSeller")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewArrivel")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("TaxPercent")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 7,
                            Count = 5,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(8854),
                            IsBestSeller = true,
                            IsDelete = false,
                            IsFeatured = false,
                            IsNewArrivel = true,
                            Name = "Product1",
                            Price = 50.0
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 8,
                            Count = 3,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(9252),
                            IsBestSeller = true,
                            IsDelete = false,
                            IsFeatured = false,
                            IsNewArrivel = true,
                            Name = "Product2",
                            Price = 55.0
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            CategoryId = 9,
                            Count = 5,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(9268),
                            IsBestSeller = false,
                            IsDelete = false,
                            IsFeatured = true,
                            IsNewArrivel = false,
                            Name = "Product3",
                            Price = 65.0
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 4,
                            CategoryId = 10,
                            Count = 6,
                            CreatedAt = new DateTime(2022, 7, 29, 23, 44, 2, 480, DateTimeKind.Local).AddTicks(9271),
                            IsBestSeller = false,
                            IsDelete = false,
                            IsFeatured = true,
                            IsNewArrivel = false,
                            Name = "Product4",
                            Price = 75.0
                        });
                });

            modelBuilder.Entity("Allup.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImgUrl = "product-1.jpg",
                            IsMain = true,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImgUrl = "product-2.jpg",
                            IsMain = false,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImgUrl = "product-3.jpg",
                            IsMain = true,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 4,
                            ImgUrl = "product-4.jpg",
                            IsMain = false,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            ImgUrl = "product-5.jpg",
                            IsMain = false,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 6,
                            ImgUrl = "product-6.jpg",
                            IsMain = true,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 7,
                            ImgUrl = "product-7.jpg",
                            IsMain = false,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 8,
                            ImgUrl = "product-8.jpg",
                            IsMain = true,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 9,
                            ImgUrl = "product-9.jpg",
                            IsMain = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 10,
                            ImgUrl = "product-10.jpg",
                            IsMain = false,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 11,
                            ImgUrl = "product-11.jpg",
                            IsMain = false,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 12,
                            ImgUrl = "product-12.jpg",
                            IsMain = false,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 13,
                            ImgUrl = "product-13.jpg",
                            IsMain = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 14,
                            ImgUrl = "product-14.jpg",
                            IsMain = false,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 15,
                            ImgUrl = "product-15.jpg",
                            IsMain = false,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 16,
                            ImgUrl = "product-16.jpg",
                            IsMain = false,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 17,
                            ImgUrl = "product-17.jpg",
                            IsMain = false,
                            ProductId = 4
                        });
                });

            modelBuilder.Entity("Allup.Models.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImgUrl = "slider-1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            ImgUrl = "slider-2.jpg"
                        });
                });

            modelBuilder.Entity("Allup.Models.SliderContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SliderContents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Explore and immerse in exciting 360 content with Fulldive’s all-in-one virtual reality platform",
                            MainTitle = "<span>4K HDR Smart TV 43 </span> Sony Bravia.",
                            SubTitle = "Save $120 when you buy"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Explore and immerse in exciting 360 content with Fulldive’s all-in-one virtual reality platform",
                            MainTitle = "<span>4K HDR Smart TV 43 </span> Sony Bravia.",
                            SubTitle = "Save $120 when you buy"
                        });
                });

            modelBuilder.Entity("Allup.Models.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("Allup.Models.SubscripeSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubscripeSections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "allup is a powerful eCommerce HTML Template",
                            ImgUrl = "bg-newletter.jpg",
                            Title = "Subscribe our newsletter"
                        });
                });

            modelBuilder.Entity("Allup.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bags"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kids"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Electronic"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Shirts"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Game"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Camera"
                        });
                });

            modelBuilder.Entity("Allup.Models.TagProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("TagProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            TagId = 2
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 3,
                            TagId = 1
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 2,
                            TagId = 3
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 2,
                            TagId = 4
                        });
                });

            modelBuilder.Entity("Allup.Models.Testonominal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Testonominals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorName = "John Doe",
                            Content = "An has feugiat vivendum, ad vix tacimates accusamus, cum commune lucilius no. Sit at alia civibus indoctum, ea mel regione percipit adipisci. Per modus nostrum vituperata no, eam ne magna solum constituam.",
                            ImgUrl = "author-1.png",
                            Site = "email@yourwebsitename.com"
                        },
                        new
                        {
                            Id = 2,
                            AuthorName = "John Doe",
                            Content = "An has feugiat vivendum, ad vix tacimates accusamus, cum commune lucilius no. Sit at alia civibus indoctum, ea mel regione percipit adipisci. Per modus nostrum vituperata no, eam ne magna solum constituam.",
                            ImgUrl = "author-1.png",
                            Site = "email@yourwebsitename.com"
                        },
                        new
                        {
                            Id = 3,
                            AuthorName = "John Doe",
                            Content = "An has feugiat vivendum, ad vix tacimates accusamus, cum commune lucilius no. Sit at alia civibus indoctum, ea mel regione percipit adipisci. Per modus nostrum vituperata no, eam ne magna solum constituam.",
                            ImgUrl = "author-1.png",
                            Site = "email@yourwebsitename.com"
                        });
                });

            modelBuilder.Entity("Allup.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24ea85e0-a3ad-4e9c-a43e-a7f84d92808f",
                            EmailConfirmed = false,
                            FullName = "Tural Cavadov",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84c33f0b-feeb-4f1d-98aa-68c6e74ca603",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Allup.Models.BasketItem", b =>
                {
                    b.HasOne("Allup.Models.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.User", "User")
                        .WithMany("BasketItems")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Allup.Models.Blog", b =>
                {
                    b.HasOne("Allup.Models.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Allup.Models.Category", b =>
                {
                    b.HasOne("Allup.Models.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Allup.Models.Comment", b =>
                {
                    b.HasOne("Allup.Models.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Allup.Models.Order", b =>
                {
                    b.HasOne("Allup.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Allup.Models.OrderItem", b =>
                {
                    b.HasOne("Allup.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Allup.Models.Product", b =>
                {
                    b.HasOne("Allup.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Allup.Models.ProductImage", b =>
                {
                    b.HasOne("Allup.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Allup.Models.TagProducts", b =>
                {
                    b.HasOne("Allup.Models.Product", "Product")
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.Tag", "Tag")
                        .WithMany("TagProducts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Allup.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Allup.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Allup.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
